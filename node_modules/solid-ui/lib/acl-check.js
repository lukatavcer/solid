'use strict';

// Access control logic

var ACL = $rdf.Namespace('http://www.w3.org/ns/auth/acl#');
var FOAF = $rdf.Namespace('http://xmlns.com/foaf/0.1/');
var VCARD = $rdf.Namespace('http://www.w3.org/2006/vcard/ns#');

module.exports = {};

function publisherTrustedApp(kb, doc, aclDoc, modesRequired, origin, docAuths) {
  var app = $rdf.sym(origin);
  var appAuths = docAuths.filter(function (auth) {
    return kb.holds(auth, ACL('mode'), ACL('Control'), aclDoc);
  });
  var owners = appAuths.map(function (auth) {
    return kb.each(auth, ACL('agent'));
  }).flat(); //  owners
  var tas = owners.map(function (owner) {
    return kb.each(owner, ACL('trust'), null, owner.doc());
  }).flat(); //ta s
  var relevant = tas.filter(function (ta) {
    return kb.holds(ta, ACL('trustedApp'), app, owner.doc());
  });
  var modesOK = relevant.map(function (ta) {
    return kb.each(ta, ACL('mode'));
  }).flat();
  modesRequired.every(function (mode) {
    return appAuths.some(function (auth) {
      return kb.holds(auth, ACL('mode'), mode, aclDoc);
    });
  });
}

function aclCheck(kb, doc, directory, aclDoc, agent, modesRequired, origin, trustedOrigins) {
  var auths = kb.each(null, ACL('accessTo'), doc, aclDoc);
  if (directory) {
    auths = auths.concat(null, (ACL('defaultForNew'), directory)); // Deprecated but keep for ages
    auths = auths.concat(null, (ACL('default'), directory));
  }
  if (origin && trustedOrigins && trustedOrigins.includes(origin)) {
    console.log('Origin ' + origin + ' is trusted');
    origin = null; // stop worrying about origin
  }
  function agentOrGroupOK(auth, agent) {
    if (kb.holds(auth, ACL('accessToClass'), FOAF('Agent'), aclDoc)) return true;
    if (!agent) return false;
    return kb.holds(auth, ACL('accessToClass'), ACL('AuthenticatedAgent'), aclDoc) || kb.holds(auth, ACL('agent'), agent, aclDoc) || kb.each(auth, ACL('accessToGroup'), null, aclDoc).some(function (group) {
      return kb.holds(agent, VCARD('member'), group, group.doc());
    });
  }
  function originOK(auth, origin) {
    return kb.holds(auth, ACL('origin'), origin, aclDoc);
  }
  return modesRequired.every(function (mode) {
    return auths.filter(function (auth) {
      return kb.holds(auth, ACL('mode'), mode, aclDoc);
    }).some(function (auth) {
      return agentOrGroupOK(auth, agent) && (!origin || originOK(auth, origin));
    });
  });
}

function aclCheck1(kb, doc, directory, aclDoc, agent, modesRequired, origin, trustedOrigins) {
  var auths = kb.each(null, ACL('accessTo'), doc, aclDoc);
  if (directory) {
    auths = auths.concat(null, (ACL('defaultForNew'), doc)); // Deprecated but keep for ages
    auths = auths.concat(null, (ACL('default'), doc));
  }
  if (origin && trustedOrigins && trustedOrigins.includes(origin)) {
    console.log('Origin ' + origin + ' is trusted');
    origin = null; // stop worrying about origin
  }
  function agentOrGroupOK(auth, agent) {
    if (kb.holds(auth, ACL('accessToClass'), FOAF('Agent'), aclDoc)) return true;
    if (!agent) return false;
    return kb.holds(auth, ACL('accessToClass'), ACL('AuthenticatedAgent'), aclDoc) || kb.holds(auth, ACL('agent'), agent, aclDoc) || kb.each(auth, ACL('accessToGroup'), null, aclDoc).some(function (group) {
      return kb.holds(agent, VCARD('member'), group, group.doc());
    });
  }
  function originOK(auth, origin) {
    return kb.holds(auth, ACL('origin'), origin, aclDoc);
  }
  return modesRequired.every(function (mode) {
    return auths.filter(function (auth) {
      return kb.holds(auth, ACL('mode'), mode, aclDoc);
    }).some(function (auth) {
      return agentOrGroupOK(auth, agent) && (!origin || originOK(auth, origin));
    });
  });
}

function aclCheck0(kb, doc, directory, aclDoc, agent, modesRequired, origin, trustedOrigins) {
  var auths = kb.each(null, ACL('accessTo'), doc);
  if (directory) {
    auths = auths.concat(null, (ACL('defaultForNew'), doc)); // Deprecated but keep for ages
    auths = auths.concat(null, (ACL('default'), doc));
  }
  if (origin && trustedOrigins && trustedOrigins.includes(origin)) {
    console.log('Origin ' + origin + ' is trusted');
    origin = null; // stop worrying about origin
  }
  return modesRequired.every(function (mode) {
    return auths.some(function (auth) {
      return kb.holds(auth, ACL('agent'), agent) && kb.holds(auth, ACL('mode'), mode);
    }) && (!origin || auths.some(function (auth) {
      return kb.holds(auth, ACL('origin'), origin) && kb.holds(auth, ACL('mode'), mode);
    }));
  });
}

module.exports.aclCheck = aclCheck;
module.exports.aclCheck0 = aclCheck0;