'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.applyRules = applyRules;
exports.extract = extract;
exports.addRules = addRules;

var _meta = require('./meta');

var _meta2 = _interopRequireDefault(_meta);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var COMMENT_PATTERN = /^\s*@?(adana|coverage|test|istanbul):?\s*(.*)\s*/;

function within(a, b) {
  return a.start.line >= b.start.line && a.start.column >= b.start.column && a.end.line <= b.end.line && a.end.column <= b.end.column;
}

function applyRules(state) {
  var coverage = (0, _meta2.default)(state);
  coverage.entries.forEach(function (entry) {
    var result = {};
    var output = [];
    entry.tags.forEach(function (tag) {
      result[tag] = true;
    });
    coverage.rules.forEach(function (rule) {
      if (within(rule.loc, entry.loc)) {
        result[rule.tag] = rule.value;
      }
    });
    Object.keys(result).forEach(function (tag) {
      var value = result[tag];
      if (value) {
        output.push(tag);
      }
    });
    entry.tags = output;
  });
}

function extract(comment) {
  var output = {};
  var result = COMMENT_PATTERN.exec(comment);
  if (result) {
    var entries = result[2].split(/\s+/);
    entries.forEach(function (entry) {
      switch (entry.charAt(0)) {
        case '+':
          output[entry.substr(1)] = true;
          break;
        case '-':
          output[entry.substr(1)] = false;
          break;
        default:
          break;
      }
    });
  }
  return output;
}

function addRules(state, loc, comments) {
  if (comments) {
    var coverage = (0, _meta2.default)(state);
    comments.forEach(function (comment) {
      var values = extract(comment.value);
      Object.keys(values).forEach(function (tag) {
        coverage.rules.push({
          tag: tag,
          value: values[tag],
          loc: loc
        });
      });
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy90YWdzLmpzIl0sIm5hbWVzIjpbImFwcGx5UnVsZXMiLCJleHRyYWN0IiwiYWRkUnVsZXMiLCJDT01NRU5UX1BBVFRFUk4iLCJ3aXRoaW4iLCJhIiwiYiIsInN0YXJ0IiwibGluZSIsImNvbHVtbiIsImVuZCIsInN0YXRlIiwiY292ZXJhZ2UiLCJlbnRyaWVzIiwiZm9yRWFjaCIsImVudHJ5IiwicmVzdWx0Iiwib3V0cHV0IiwidGFncyIsInRhZyIsInJ1bGVzIiwicnVsZSIsImxvYyIsInZhbHVlIiwiT2JqZWN0Iiwia2V5cyIsInB1c2giLCJjb21tZW50IiwiZXhlYyIsInNwbGl0IiwiY2hhckF0Iiwic3Vic3RyIiwiY29tbWVudHMiLCJ2YWx1ZXMiXSwibWFwcGluZ3MiOiI7Ozs7O1FBV2dCQSxVLEdBQUFBLFU7UUF1QkFDLE8sR0FBQUEsTztRQXFCQUMsUSxHQUFBQSxROztBQXZEaEI7Ozs7OztBQUVBLElBQU1DLGtCQUFrQixrREFBeEI7O0FBRUEsU0FBU0MsTUFBVCxDQUFnQkMsQ0FBaEIsRUFBbUJDLENBQW5CLEVBQXNCO0FBQ3BCLFNBQU9ELEVBQUVFLEtBQUYsQ0FBUUMsSUFBUixJQUFnQkYsRUFBRUMsS0FBRixDQUFRQyxJQUF4QixJQUNMSCxFQUFFRSxLQUFGLENBQVFFLE1BQVIsSUFBa0JILEVBQUVDLEtBQUYsQ0FBUUUsTUFEckIsSUFFTEosRUFBRUssR0FBRixDQUFNRixJQUFOLElBQWNGLEVBQUVJLEdBQUYsQ0FBTUYsSUFGZixJQUdMSCxFQUFFSyxHQUFGLENBQU1ELE1BQU4sSUFBZ0JILEVBQUVJLEdBQUYsQ0FBTUQsTUFIeEI7QUFJRDs7QUFFTSxTQUFTVCxVQUFULENBQW9CVyxLQUFwQixFQUEyQjtBQUNoQyxNQUFNQyxXQUFXLG9CQUFLRCxLQUFMLENBQWpCO0FBQ0FDLFdBQVNDLE9BQVQsQ0FBaUJDLE9BQWpCLENBQXlCLFVBQUNDLEtBQUQsRUFBVztBQUNsQyxRQUFNQyxTQUFTLEVBQWY7QUFDQSxRQUFNQyxTQUFTLEVBQWY7QUFDQUYsVUFBTUcsSUFBTixDQUFXSixPQUFYLENBQW1CLFVBQUNLLEdBQUQsRUFBUztBQUMxQkgsYUFBT0csR0FBUCxJQUFjLElBQWQ7QUFDRCxLQUZEO0FBR0FQLGFBQVNRLEtBQVQsQ0FBZU4sT0FBZixDQUF1QixVQUFDTyxJQUFELEVBQVU7QUFDL0IsVUFBSWpCLE9BQU9pQixLQUFLQyxHQUFaLEVBQWlCUCxNQUFNTyxHQUF2QixDQUFKLEVBQWlDO0FBQy9CTixlQUFPSyxLQUFLRixHQUFaLElBQW1CRSxLQUFLRSxLQUF4QjtBQUNEO0FBQ0YsS0FKRDtBQUtBQyxXQUFPQyxJQUFQLENBQVlULE1BQVosRUFBb0JGLE9BQXBCLENBQTRCLFVBQUNLLEdBQUQsRUFBUztBQUNuQyxVQUFNSSxRQUFRUCxPQUFPRyxHQUFQLENBQWQ7QUFDQSxVQUFJSSxLQUFKLEVBQVc7QUFDVE4sZUFBT1MsSUFBUCxDQUFZUCxHQUFaO0FBQ0Q7QUFDRixLQUxEO0FBTUFKLFVBQU1HLElBQU4sR0FBYUQsTUFBYjtBQUNELEdBbEJEO0FBbUJEOztBQUVNLFNBQVNoQixPQUFULENBQWlCMEIsT0FBakIsRUFBMEI7QUFDL0IsTUFBTVYsU0FBUyxFQUFmO0FBQ0EsTUFBTUQsU0FBU2IsZ0JBQWdCeUIsSUFBaEIsQ0FBcUJELE9BQXJCLENBQWY7QUFDQSxNQUFJWCxNQUFKLEVBQVk7QUFDVixRQUFNSCxVQUFVRyxPQUFPLENBQVAsRUFBVWEsS0FBVixDQUFnQixLQUFoQixDQUFoQjtBQUNBaEIsWUFBUUMsT0FBUixDQUFnQixVQUFDQyxLQUFELEVBQVc7QUFDekIsY0FBUUEsTUFBTWUsTUFBTixDQUFhLENBQWIsQ0FBUjtBQUNBLGFBQUssR0FBTDtBQUNFYixpQkFBT0YsTUFBTWdCLE1BQU4sQ0FBYSxDQUFiLENBQVAsSUFBMEIsSUFBMUI7QUFDQTtBQUNGLGFBQUssR0FBTDtBQUNFZCxpQkFBT0YsTUFBTWdCLE1BQU4sQ0FBYSxDQUFiLENBQVAsSUFBMEIsS0FBMUI7QUFDQTtBQUNGO0FBQ0U7QUFSRjtBQVVELEtBWEQ7QUFZRDtBQUNELFNBQU9kLE1BQVA7QUFDRDs7QUFFTSxTQUFTZixRQUFULENBQWtCUyxLQUFsQixFQUF5QlcsR0FBekIsRUFBOEJVLFFBQTlCLEVBQXdDO0FBQzdDLE1BQUlBLFFBQUosRUFBYztBQUNaLFFBQU1wQixXQUFXLG9CQUFLRCxLQUFMLENBQWpCO0FBQ0FxQixhQUFTbEIsT0FBVCxDQUFpQixVQUFDYSxPQUFELEVBQWE7QUFDNUIsVUFBTU0sU0FBU2hDLFFBQVEwQixRQUFRSixLQUFoQixDQUFmO0FBQ0FDLGFBQU9DLElBQVAsQ0FBWVEsTUFBWixFQUFvQm5CLE9BQXBCLENBQTRCLFVBQUNLLEdBQUQsRUFBUztBQUNuQ1AsaUJBQVNRLEtBQVQsQ0FBZU0sSUFBZixDQUFvQjtBQUNsQlAsa0JBRGtCO0FBRWxCSSxpQkFBT1UsT0FBT2QsR0FBUCxDQUZXO0FBR2xCRztBQUhrQixTQUFwQjtBQUtELE9BTkQ7QUFPRCxLQVREO0FBVUQ7QUFDRiIsImZpbGUiOiJ0YWdzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG1ldGEgZnJvbSAnLi9tZXRhJztcblxuY29uc3QgQ09NTUVOVF9QQVRURVJOID0gL15cXHMqQD8oYWRhbmF8Y292ZXJhZ2V8dGVzdHxpc3RhbmJ1bCk6P1xccyooLiopXFxzKi87XG5cbmZ1bmN0aW9uIHdpdGhpbihhLCBiKSB7XG4gIHJldHVybiBhLnN0YXJ0LmxpbmUgPj0gYi5zdGFydC5saW5lICYmXG4gICAgYS5zdGFydC5jb2x1bW4gPj0gYi5zdGFydC5jb2x1bW4gJiZcbiAgICBhLmVuZC5saW5lIDw9IGIuZW5kLmxpbmUgJiZcbiAgICBhLmVuZC5jb2x1bW4gPD0gYi5lbmQuY29sdW1uO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXBwbHlSdWxlcyhzdGF0ZSkge1xuICBjb25zdCBjb3ZlcmFnZSA9IG1ldGEoc3RhdGUpO1xuICBjb3ZlcmFnZS5lbnRyaWVzLmZvckVhY2goKGVudHJ5KSA9PiB7XG4gICAgY29uc3QgcmVzdWx0ID0geyB9O1xuICAgIGNvbnN0IG91dHB1dCA9IFtdO1xuICAgIGVudHJ5LnRhZ3MuZm9yRWFjaCgodGFnKSA9PiB7XG4gICAgICByZXN1bHRbdGFnXSA9IHRydWU7XG4gICAgfSk7XG4gICAgY292ZXJhZ2UucnVsZXMuZm9yRWFjaCgocnVsZSkgPT4ge1xuICAgICAgaWYgKHdpdGhpbihydWxlLmxvYywgZW50cnkubG9jKSkge1xuICAgICAgICByZXN1bHRbcnVsZS50YWddID0gcnVsZS52YWx1ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBPYmplY3Qua2V5cyhyZXN1bHQpLmZvckVhY2goKHRhZykgPT4ge1xuICAgICAgY29uc3QgdmFsdWUgPSByZXN1bHRbdGFnXTtcbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICBvdXRwdXQucHVzaCh0YWcpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGVudHJ5LnRhZ3MgPSBvdXRwdXQ7XG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZXh0cmFjdChjb21tZW50KSB7XG4gIGNvbnN0IG91dHB1dCA9IHsgfTtcbiAgY29uc3QgcmVzdWx0ID0gQ09NTUVOVF9QQVRURVJOLmV4ZWMoY29tbWVudCk7XG4gIGlmIChyZXN1bHQpIHtcbiAgICBjb25zdCBlbnRyaWVzID0gcmVzdWx0WzJdLnNwbGl0KC9cXHMrLyk7XG4gICAgZW50cmllcy5mb3JFYWNoKChlbnRyeSkgPT4ge1xuICAgICAgc3dpdGNoIChlbnRyeS5jaGFyQXQoMCkpIHtcbiAgICAgIGNhc2UgJysnOlxuICAgICAgICBvdXRwdXRbZW50cnkuc3Vic3RyKDEpXSA9IHRydWU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnLSc6XG4gICAgICAgIG91dHB1dFtlbnRyeS5zdWJzdHIoMSldID0gZmFsc2U7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIG91dHB1dDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFkZFJ1bGVzKHN0YXRlLCBsb2MsIGNvbW1lbnRzKSB7XG4gIGlmIChjb21tZW50cykge1xuICAgIGNvbnN0IGNvdmVyYWdlID0gbWV0YShzdGF0ZSk7XG4gICAgY29tbWVudHMuZm9yRWFjaCgoY29tbWVudCkgPT4ge1xuICAgICAgY29uc3QgdmFsdWVzID0gZXh0cmFjdChjb21tZW50LnZhbHVlKTtcbiAgICAgIE9iamVjdC5rZXlzKHZhbHVlcykuZm9yRWFjaCgodGFnKSA9PiB7XG4gICAgICAgIGNvdmVyYWdlLnJ1bGVzLnB1c2goe1xuICAgICAgICAgIHRhZyxcbiAgICAgICAgICB2YWx1ZTogdmFsdWVzW3RhZ10sXG4gICAgICAgICAgbG9jLFxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG59XG4iXX0=